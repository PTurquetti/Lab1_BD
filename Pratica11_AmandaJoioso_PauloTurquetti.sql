/* Pratica 11

Amanda Valukas Breviglieri Joioso - 4818232
Paulo Henrique Vedovatto Turquetti - 13750791

*/

-- QUESTÃO 1 -------------------------------------------------------------------------------



-- QUESTÃO 2 -------------------------------------------------------------------------------

-- a)
CREATE TABLE DML_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USUARIO VARCHAR2(30),
    OPERACAO VARCHAR2(20),
    DATA_OPERACAO TIMESTAMP,
    ESTRELA VARCHAR2(31 BYTE),
    SISTEMA VARCHAR2(31 BYTE)
);


CREATE OR REPLACE TRIGGER SISTEMA_DML_LOG_TRIGGER
AFTER INSERT OR UPDATE OR DELETE ON SISTEMA
FOR EACH ROW
DECLARE
    V_USUARIO VARCHAR2(30);
BEGIN
    -- Obtém o nome do usuário que realizou a operação
    SELECT USER INTO V_USUARIO FROM dual;
    
    -- Insere um registro na tabela de log
    IF INSERTING THEN
        INSERT INTO DML_LOG (USUARIO, OPERACAO, DATA_OPERACAO, ESTRELA, SISTEMA)
        VALUES (V_USUARIO, 'INSERT', SYSTIMESTAMP, :NEW.ESTRELA, :NEW.NOME);
    ELSIF UPDATING THEN
        INSERT INTO DML_LOG (USUARIO, OPERACAO, DATA_OPERACAO, ESTRELA, SISTEMA)
        VALUES (V_USUARIO, 'UPDATE', SYSTIMESTAMP, :NEW.ESTRELA, :NEW.NOME);
    ELSIF DELETING THEN
        INSERT INTO DML_LOG (USUARIO, OPERACAO, DATA_OPERACAO, ESTRELA, SISTEMA)
        VALUES (V_USUARIO, 'DELETE', SYSTIMESTAMP, :OLD.ESTRELA, :OLD.NOME);
    END IF;
END;


-- INSERINDO DADOS PARA TESTE
INSERT INTO SISTEMA (ESTRELA, NOME) VALUES ('GJ 9798', 'SISTEMA 1');
UPDATE SISTEMA SET NOME = 'SISTEMA 2' WHERE ESTRELA = 'GJ 9798';
DELETE FROM SISTEMA WHERE ESTRELA = 'GJ 9798';

-- ANALISANDO RESULTADO
SELECT * FROM DML_LOG;

/*
LOG_ID      USUARIO      OPERACAO      DATA_OPERACAO                        ESTRELA      SISTEMA
6	       A13750791	 INSERT	    04/06/24 17:17:56,106000000        	GJ 9798	SISTEMA     1
7	       A13750791	 UPDATE	    04/06/24 17:17:56,246000000	        GJ 9798	SISTEMA     2
8	       A13750791	 DELETE    	04/06/24 17:17:56,387000000	        GJ 9798	SISTEMA     2
*/






-- b) PARA FAZERMOS TESTES, AS OPERAÇÕES SERÃO REALIZADAS EM BLOCOS PL/SQL

-- TESTANDO OPERACAO COM COMMIT
BEGIN
    INSERT INTO SISTEMA (ESTRELA, NOME) VALUES ('GJ 1234', 'SISTEMA 3');

    COMMIT;

    DECLARE
        CURSOR C_LOG IS
            SELECT * FROM DML_LOG;
        V_RESULTADO DML_LOG%ROWTYPE;
    BEGIN
        OPEN C_LOG;
        
        LOOP
            FETCH C_LOG INTO V_RESULTADO;
            EXIT WHEN C_LOG%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('LOG_ID: ' || V_RESULTADO.LOG_ID || 
                                 ', USUARIO: ' || V_RESULTADO.USUARIO || 
                                 ', OPERACAO: ' || V_RESULTADO.OPERACAO || 
                                 ', DATA_OPERACAO: ' || V_RESULTADO.DATA_OPERACAO || 
                                 ', ESTRELA: ' || V_RESULTADO.ESTRELA || 
                                 ', SISTEMA: ' || V_RESULTADO.SISTEMA);
        END LOOP;
        
        -- Fecha o cursor
        CLOSE C_LOG;
    END;
END;


/* SAIDA DBMS

LOG_ID: 17, USUARIO: A13750791, OPERACAO: INSERT, DATA_OPERACAO: 04/06/24 17:32:23,283000, ESTRELA: GJ 1234, SISTEMA: SISTEMA 3

*/


-- TESTANDO OPERACAO COM ROLLBACK
BEGIN
    INSERT INTO SISTEMA (ESTRELA, NOME) VALUES ('5Ups Boo', 'SISTEMA 55');
    ROLLBACK;

    DECLARE
        CURSOR C_LOG IS
            SELECT * FROM DML_LOG;
        V_RESULTADO DML_LOG%ROWTYPE;
    BEGIN

        OPEN C_LOG;
        
        
        LOOP
            FETCH C_LOG INTO V_RESULTADO;
            EXIT WHEN C_LOG%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE('LOG_ID: ' || V_RESULTADO.LOG_ID || 
                                 ', USUARIO: ' || V_RESULTADO.USUARIO || 
                                 ', OPERACAO: ' || V_RESULTADO.OPERACAO || 
                                 ', DATA_OPERACAO: ' || V_RESULTADO.DATA_OPERACAO || 
                                 ', ESTRELA: ' || V_RESULTADO.ESTRELA || 
                                 ', SISTEMA: ' || V_RESULTADO.SISTEMA);
        END LOOP;
        
        CLOSE C_LOG;
    END;
END;

/* SAIDA DBMS

OBS: Continua a mesma, ou seja, a inserção não foi realizada
LOG_ID: 17, USUARIO: A13750791, OPERACAO: INSERT, DATA_OPERACAO: 04/06/24 17:32:23,283000, ESTRELA: GJ 1234, SISTEMA: SISTEMA 3

*/

-- TESTANDO OPERACAO COM  COMMIT E ROLLBACK NO MESMO BLOCO PL/SQL

-- LIMPANDO TABELA SISTEMA E DML_LOG
DELETE FROM SISTEMA;
DELETE FROM DML_LOG;

-- BLOCO PL/SQL
BEGIN
    -- INSERT COM COMMIT
    INSERT INTO SISTEMA (ESTRELA, NOME) VALUES ('5Ups Boo', 'SISTEMA 3');
    COMMIT;
    
    -- UPDATE COM ROLLBACK
    UPDATE SISTEMA SET NOME = 'SISTEMA 3A' WHERE ESTRELA = '5Ups Boo';
    ROLLBACK;
    
    -- DELETE COM COMMIT
    DELETE FROM SISTEMA WHERE ESTRELA = '5Ups Boo';
    COMMIT;


    DECLARE
        CURSOR C_LOG IS
            SELECT * FROM DML_LOG;
        V_RESULTADO DML_LOG%ROWTYPE;
    BEGIN

        OPEN C_LOG;
        
        
        LOOP
            FETCH C_LOG INTO V_RESULTADO;
            EXIT WHEN C_LOG%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE('LOG_ID: ' || V_RESULTADO.LOG_ID || 
                                 ', USUARIO: ' || V_RESULTADO.USUARIO || 
                                 ', OPERACAO: ' || V_RESULTADO.OPERACAO || 
                                 ', DATA_OPERACAO: ' || V_RESULTADO.DATA_OPERACAO || 
                                 ', ESTRELA: ' || V_RESULTADO.ESTRELA || 
                                 ', SISTEMA: ' || V_RESULTADO.SISTEMA);
        END LOOP;
        
        CLOSE C_LOG;
    END;
END;

/* SAIDA DBMS
LOG_ID: 25, USUARIO: A13750791, OPERACAO: INSERT, DATA_OPERACAO: 04/06/24 17:44:20,684000, ESTRELA: 5Ups Boo, SISTEMA: SISTEMA 3
LOG_ID: 27, USUARIO: A13750791, OPERACAO: DELETE, DATA_OPERACAO: 04/06/24 17:44:20,684000, ESTRELA: 5Ups Boo, SISTEMA: SISTEMA 3



 -- ANALISANDO RESULTADOS --


No bloco PL/SQL fornecido, são realizadas operações INSERT, UPDATE E DELETE na tabela SISTEMA.
Cada operação é acompanhada de um COMMIT ou ROLLBACK, dependendo do resultado esperado.

Ao analisar a saída do DBMS, percebemos que apenas as operações de INSERT e DELETE são registradas na tabela DML_LOG,
refletindo as mudanças permanentes na tabela SISTEMA. Isso porque essas operações foram seguidas de COMMIT.

Já o UPDATE não é registrado no log porque foi desfeito pelo ROLLBACK, que restaurou o estado do banco ao último COMMIT realizado,
ou seja, o banco voltou ao estado que tava quando foi executado o COMMIT após o INSERT.

*/




-- C)

-- ATUALIZANDO CURSOR PARA REGISTRAR ATE OPERACOES QUE SOFREM ROLLBACK
CREATE OR REPLACE TRIGGER SISTEMA_DML_LOG_TRIGGER
BEFORE INSERT OR UPDATE OR DELETE ON SISTEMA
FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    
    PROCEDURE REGISTRAR_LOG(OPERACAO VARCHAR2, ESTRELA VARCHAR2, NOME VARCHAR2) IS
    BEGIN
        INSERT INTO DML_LOG (USUARIO, OPERACAO, DATA_OPERACAO, ESTRELA, SISTEMA)
        VALUES (USER, OPERACAO, SYSTIMESTAMP, ESTRELA, NOME);
        COMMIT;
    END;
    
BEGIN
    IF INSERTING THEN
        REGISTRAR_LOG('INSERT', :NEW.ESTRELA, :NEW.NOME);
    ELSIF UPDATING THEN
        REGISTRAR_LOG('UPDATE', :NEW.ESTRELA, :NEW.NOME);
    ELSIF DELETING THEN
        REGISTRAR_LOG('DELETE', :OLD.ESTRELA, :OLD.NOME);
    END IF;
END;





-- TEXTANDO TRIGGER COM COMMITS E ROLLBACKS
BEGIN
    -- INSERT COM COMMIT
    INSERT INTO SISTEMA (ESTRELA, NOME) VALUES ('5Ups Boo', 'SISTEMA 3');
    COMMIT;
    
    -- UPDATE COM ROLLBACK
    UPDATE SISTEMA SET NOME = 'SISTEMA 3A' WHERE ESTRELA = '5Ups Boo';
    ROLLBACK;
    
    -- DELETE COM COMMIT
    DELETE FROM SISTEMA WHERE ESTRELA = '5Ups Boo';
    COMMIT;


    DECLARE
        CURSOR C_LOG IS
            SELECT * FROM DML_LOG;
        V_RESULTADO DML_LOG%ROWTYPE;
    BEGIN

        OPEN C_LOG;
        
        
        LOOP
            FETCH C_LOG INTO V_RESULTADO;
            EXIT WHEN C_LOG%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE('LOG_ID: ' || V_RESULTADO.LOG_ID || 
                                 ', USUARIO: ' || V_RESULTADO.USUARIO || 
                                 ', OPERACAO: ' || V_RESULTADO.OPERACAO || 
                                 ', DATA_OPERACAO: ' || V_RESULTADO.DATA_OPERACAO || 
                                 ', ESTRELA: ' || V_RESULTADO.ESTRELA || 
                                 ', SISTEMA: ' || V_RESULTADO.SISTEMA);
        END LOOP;
        
        CLOSE C_LOG;
    END;
END;

/* SAÍDA DBMS

LOG_ID: 13, USUARIO: A13750791, OPERACAO: INSERT, DATA_OPERACAO: 04/06/24 18:07:29,301000, ESTRELA: 5Ups Boo, SISTEMA: SISTEMA 3
LOG_ID: 14, USUARIO: A13750791, OPERACAO: UPDATE, DATA_OPERACAO: 04/06/24 18:07:29,301000, ESTRELA: 5Ups Boo, SISTEMA: SISTEMA 3A
LOG_ID: 15, USUARIO: A13750791, OPERACAO: DELETE, DATA_OPERACAO: 04/06/24 18:07:29,301000, ESTRELA: 5Ups Boo, SISTEMA: SISTEMA 3


Vemos agora que a operação de UPDATE foi registrada na tabela mesmo que tenha sofrido rollback. Essa operação tentou definir
SISTEMA = SISTEMA 3A, no entando na operação de DELETE vemos que SISTEMA = SISTEMA 3, o que significa que a operação de UPDATE
não foi concretizada, ou seja, sofreu ROLLBACK

*/







